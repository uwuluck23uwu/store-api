using ClassLibrary.Models.Dto;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Store.Data;
using System.Security.Claims;

namespace Store.Controllers;

[ApiController]
[Route("api/[controller]")]
public class LocationController : ControllerBase
{
    private readonly ILocationService _locationService;
    private readonly ApplicationDbContext _context;

    public LocationController(ILocationService locationService, ApplicationDbContext context)
    {
        _locationService = locationService;
        _context = context;
    }

    /// Get all locations with pagination and search
    [HttpGet]
    public async Task<IActionResult> GetAll(
        [FromQuery] int pageNumber = 1,
        [FromQuery] int pageSize = 10,
        [FromQuery] string? search = null)
    {
        var result = await _locationService.GetAllAsync(pageNumber, pageSize, search);
        return result.TaskStatus ? Ok(result) : BadRequest(result);
    }

    /// Get location by ID
    [HttpGet("{id:int}")]
    public async Task<IActionResult> GetById(int id)
    {
        var result = await _locationService.GetByIdAsync(id);
        return result.TaskStatus ? Ok(result) : NotFound(result);
    }

    /// Get location by LocationId (LO-XXXX)
    [HttpGet("location-id/{locationId}")]
    public async Task<IActionResult> GetByLocationId(string locationId)
    {
        var result = await _locationService.GetByLocationIdAsync(locationId);
        return result.TaskStatus ? Ok(result) : NotFound(result);
    }

    /// Get locations by type (Store, Pickup, Farm, Tourist, etc.)
    [HttpGet("type/{locationType}")]
    public async Task<IActionResult> GetByType(string locationType)
    {
        var result = await _locationService.GetByTypeAsync(locationType);
        return Ok(result);
    }

    /// Get nearby locations within a radius (in kilometers)
    [HttpGet("nearby")]
    public async Task<IActionResult> GetNearby(
        [FromQuery] decimal latitude,
        [FromQuery] decimal longitude,
        [FromQuery] decimal radiusKm = 5)
    {
        var result = await _locationService.GetNearbyLocationsAsync(latitude, longitude, radiusKm);
        return Ok(result);
    }

    /// Get all locations for a specific seller
    [HttpGet("seller/{sellerId:int}")]
    public async Task<IActionResult> GetBySeller(int sellerId)
    {
        var result = await _locationService.GetBySellerIdAsync(sellerId);
        return Ok(result);
    }

    /// Create a new location (Admin or Seller only)
    [HttpPost]
    [Authorize(Roles = "Admin,Seller")]
    public async Task<IActionResult> Create([FromBody] LocationCreateDTO dto)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        var result = await _locationService.CreateAsync(dto);
        return result.TaskStatus ? Ok(result) : BadRequest(result);
    }

    /// Update location by RefId or LocationId (Admin or Seller can update their own location)
    [HttpPut("{refId}")]
    [Authorize(Roles = "Admin,Seller")]
    public async Task<IActionResult> Update(string refId, [FromBody] LocationUpdateDTO dto)
    {
        if (!ModelState.IsValid)
            return BadRequest(ModelState);

        // Get user role and ID from claims
        var userRole = User.FindFirst(ClaimTypes.Role)?.Value;
        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        // If Seller, check if they own this location
        if (userRole == "Seller" && !string.IsNullOrEmpty(userId))
        {
            // Find location by RefId (could be Id or LocationId)
            var location = await _context.Locations
                .FirstOrDefaultAsync(l => l.Id.ToString() == refId || l.LocationId == refId);

            if (location == null)
            {
                return NotFound(new { message = "ไม่พบข้อมูล Location" });
            }

            // Get seller ID from user ID
            var seller = await _context.Sellers.FirstOrDefaultAsync(s => s.UserId == int.Parse(userId));
            if (seller == null || location.SellerId != seller.SellerId)
            {
                return Forbid(); // 403 Forbidden - Seller can only update their own location
            }
        }

        var result = await _locationService.UpdateAsync(refId, dto);
        return result.TaskStatus ? Ok(result) : BadRequest(result);
    }

    /// Delete location (soft delete - Admin or Seller can delete their own location)
    [HttpDelete("{id:int}")]
    [Authorize(Roles = "Admin,Seller")]
    public async Task<IActionResult> Delete(int id)
    {
        // Get user role and ID from claims
        var userRole = User.FindFirst(ClaimTypes.Role)?.Value;
        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        // If Seller, check if they own this location
        if (userRole == "Seller" && !string.IsNullOrEmpty(userId))
        {
            var location = await _context.Locations.FindAsync(id);
            if (location == null)
            {
                return NotFound(new { message = "ไม่พบข้อมูล Location" });
            }

            // Get seller ID from user ID
            var seller = await _context.Sellers.FirstOrDefaultAsync(s => s.UserId == int.Parse(userId));
            if (seller == null || location.SellerId != seller.SellerId)
            {
                return Forbid(); // 403 Forbidden - Seller can only delete their own location
            }
        }

        var result = await _locationService.DeleteAsync(id);
        return result.TaskStatus ? Ok(result) : BadRequest(result);
    }
}
